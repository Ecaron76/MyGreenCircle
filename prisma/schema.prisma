generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId       Int          @id @default(autoincrement())
  userName     String       @unique
  email        String       @unique
  userPassword String
  userAvatar   String?
  address      String
  ville        String
  CP           String
  latitude     Float
  longitude    Float
  participate  Participate[]
  posts        Post[]       @relation("UserPosts")
  comments     Comment[]
  userGroups   Join[]
}

model Post {
  postId     Int        @id @default(autoincrement())
  title      String
  content    String
  createdAt  DateTime   @default(now())
  picture    String?
  isVisible  Boolean
  userId     Int
  user       User       @relation(fields: [userId], references: [userId], name: "UserPosts", onDelete: Cascade)
  comments   Comment[]
  groupId    Int
  group      Group      @relation(fields: [groupId], references: [groupId])
}

model Comment {
  commentId  Int       @id @default(autoincrement())
  content    String
  createdAt  DateTime  @default(now())
  userId     Int
  user       User      @relation(fields: [userId], references: [userId], onDelete: Cascade)
  postId     Int
  post       Post      @relation(fields: [postId], references: [postId], onDelete: Cascade)
}

model Group {
  groupId          Int       @id @default(autoincrement())
  groupName        String
  groupDescription String
  groupLocation    String
  users            Join[]
  posts            Post[]
  events           Event[]
}

model Event {
  eventId              Int       @id @default(autoincrement())
  title                String
  location             String
  description          String
  startDate            DateTime
  endDate              DateTime
  status               String
  limitSubscriptionDate DateTime?
  address              String
  ville                String
  CP                   String
  latitude             Float
  longitude            Float
  groupId              Int
  group                Group     @relation(fields: [groupId], references: [groupId])
  participants         Participate[]
}

model Join {
  userId       Int
  groupId      Int
  role         String
  isAccepted   Boolean
  joiningDate  DateTime
  user         User      @relation(fields: [userId], references: [userId], onDelete: Cascade)
  group        Group     @relation(fields: [groupId], references: [groupId], onDelete: Cascade)

  @@id([userId, groupId])
}

model Participate {
  userId   Int
  eventId  Int
  user     User      @relation(fields: [userId], references: [userId], onDelete: Cascade)
  event    Event     @relation(fields: [eventId], references: [eventId], onDelete: Cascade)

  @@id([userId, eventId])
}

