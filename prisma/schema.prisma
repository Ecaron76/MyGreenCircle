generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  username      String    @unique
  email         String    @unique
  password      String
  image         String?
  admin         Boolean   @default(false)
  accounts      Account[]
  sessions      Session[]

  address   String?
  ville     String
  CP        String
  latitude  Float?
  longitude Float?

  participate Participate[]
  posts       Post[]        @relation("UserPosts")
  comments    Comment[]
  userGroups  Join[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Post {
  postId    Int       @id @default(autoincrement())
  title     String
  content   String
  createdAt DateTime  @default(now())
  picture   String?
  isVisible Boolean
  userId    String
  user      User      @relation(fields: [userId], references: [id], name: "UserPosts", onDelete: Cascade)
  comments  Comment[]
  groupId   Int
  group     Group     @relation(fields: [groupId], references: [groupId])
}

model Comment {
  commentId Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    Int
  post      Post     @relation(fields: [postId], references: [postId], onDelete: Cascade)
}

model Group {
  groupId          Int     @id @default(autoincrement())
  groupName        String
  groupDescription String
  groupLocation    String
  users            Join[]
  posts            Post[]
  events           Event[]
}

model Event {
  eventId               Int           @id @default(autoincrement())
  title                 String
  location              String
  description           String
  startDate             DateTime
  endDate               DateTime
  status                String
  limitSubscriptionDate DateTime?
  address               String
  ville                 String
  CP                    String
  latitude              Float
  longitude             Float
  groupId               Int
  group                 Group         @relation(fields: [groupId], references: [groupId])
  participants          Participate[]
}

model Join {
  userId      String
  groupId     Int
  role        String
  isAccepted  Boolean
  joiningDate DateTime
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  group       Group    @relation(fields: [groupId], references: [groupId], onDelete: Cascade)

  @@id([userId, groupId])
}

model Participate {
  userId  String
  eventId Int
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  event   Event  @relation(fields: [eventId], references: [eventId], onDelete: Cascade)

  @@id([userId, eventId])
}
